AWSTemplateFormatVersion: 2010-09-09

###############################################################################
Parameters:
###############################################################################

  DomainName:
    Type: String
    Description: The domain name
    Default: nsncareer.com

  PriceClass:
    Type: String
    Description: The CloudFront distribution price class
    Default: PriceClass_All
    AllowedValues:
      - 'PriceClass_100'
      - 'PriceClass_200'
      - 'PriceClass_All'

Resources:

#############################################################
  # Cloudfront
#############################################################
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          - !Sub cloudfronturl.${DomainName}
          - !Sub s3url.${DomainName}
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: true
          MaxTTL: 31536000
          SmoothStreaming: false
          TargetOriginId: !Sub S3-${AWS::StackName}-root
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CloudFrontOriginAccessIdentity ] ]
#          - CustomOriginConfig:
#              HTTPPort: 80
#              HTTPSPort: 443
#              OriginKeepaliveTimeout: 5
#              OriginProtocolPolicy: https-only
#              OriginReadTimeout: 30
#              OriginSSLProtocols:
#                - TLSv1
#                - TLSv1.1
#                - TLSv1.2
            # Only one of the above configs can be specified. The one in use is for OAI
            DomainName: !GetAtt S3MainBucket.DomainName
            Id: !Sub S3-${AWS::StackName}-root
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateManagerCertificate
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
#############################################################
  # Certificate must be created in ue-east-1
#############################################################
  CertificateManagerCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: EMAIL
      SubjectAlternativeNames:
        - !Sub cloudfronturl.${DomainName}
        - !Sub s3url.${DomainName}
      DomainValidationOptions:
        - DomainName: !Sub cloudfronturl.${DomainName}
          ValidationDomain: !Ref DomainName
#          HostedZoneId: !Ref HostedZone
        - DomainName: !Sub s3url.${DomainName}
#          HostedZoneId: !Ref HostedZone
          ValidationDomain: !Ref DomainName

  # We use DNS validation method to validate the certificate we have requested
  # AWS will issue a CName that we shall use to create our record sets
  # subjective alternative name is used to request an ssl certificate for our sub domain names
  # After the certificate is created, we get our cname and we can validate that the Cname belongs to us
  # by viweing it in Route53 UI. For Email validation, use "ValidationDomain" and HostedZoneId for DNS
#############################################################
  # Hosted zone through route53
#############################################################
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: "This is cdn hosted zone."
  # The hosted zone name should always be your domain name
#############################################################
  # Origin access identity
#############################################################
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub CloudFront OAI for ${DomainName}
  # Users can not access your S3 bucket contents directly. OAI restrics this by forcing users to use the cloudfront
  # URL. Our bucket can now be private but only accessible through cloudfront
#############################################################
  # Route 53 records
#############################################################
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      RecordSets:
        - Name: !Sub cloudfronturl.${DomainName}.
          Type: CNAME
          TTL: '300'
          SetIdentifier: Cloudfront_one
          Weight: '140'
          ResourceRecords:
            - !GetAtt CloudFrontDistribution.DomainName

#        - Name: !Sub cloudfrontURL.${DomainName}
#          Type: A
#          AliasTarget:
#            DNSName: !GetAtt CloudFrontDistribution.DomainName
#            EvaluateTargetHealth: false
#            HostedZoneId: !Ref HostedZone
#############################################################
  # Main bucket for hosting our static website
#############################################################
  S3MainBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3mainbucket
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: testing-logs
      WebsiteConfiguration:
        ErrorDocument: 404.html
        IndexDocument: index.html
      MetricsConfigurations:
        - Id: EntireBucket
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
#############################################################
  # Bucket policy for main bucket
#############################################################
  S3MainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3MainBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Resource: !Sub ${S3MainBucket.Arn}/*
#            Condition:
#              StringEquals:
#                'AWS:SourceArn': arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
#############################################################
  # Bucket for logging
#############################################################
  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3loggingbucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: InfrequentAccess
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
          - Id: DeepArchive
            Status: Enabled
            Transitions:
              - TransitionInDays: 60
                StorageClass: DEEP_ARCHIVE
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
#############################################################
  # Bucket policy for logging bucket
#############################################################
  S3LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref LoggingBucket
                - /*
            Condition:
              ArnLike:
                'aws:SourceArn': !GetAtt
                  - S3MainBucket
                  - Arn
              StringEquals:
                'aws:SourceAccount': !Sub ${AWS::AccountId}
Outputs:
    WebsiteURL:
        Value: !GetAtt S3MainBucket.WebsiteURL
        Description: URL for website hosted on S3
    CloudfrontURL:
        Value: !GetAtt CloudFrontDistribution.DomainName
        Description: URL for Cloudfront
    CloudFrontRoute53URL:
      Value: !Sub cloudfronturl.${DomainName}
      Description: SSL URL for Route53-Cloudfront

